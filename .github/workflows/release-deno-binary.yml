name: Build and Release Deno Binary

on:
  # push:
  #   tags:
  #     - 'v*' # Trigger only for version tags
  workflow_dispatch
permissions:
  contents: write

jobs:
  build:
    name: Build Deno Binary
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Deno environment
      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      # Compile the Deno app
      - name: Compile Deno Binary
        run: |
          deno compile  --allow-read --allow-run --allow-env --allow-sys --allow-net --output ./cr-linux ./src/index.ts
          ls -lh ./cr-linux # Confirm binary creation

      # Upload the binary to GitHub Release
      - name: Get Release ID
        id: get_release
        run: |
          response=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }})
          echo "Response: $response"
          echo "::set-output name=id::$(echo "$response" | jq -r '.id')"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Delete the old binary asset if it exists
      - name: Delete Existing Assets
        if: steps.get_release.outputs.id != 'null'
        run: |
          release_id=${{ steps.get_release.outputs.id }}
          assets=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/releases/$release_id | jq -r '.assets[] | .id')
          for asset_id in $assets; do
            echo "Deleting asset ID: $asset_id"
            curl -X DELETE \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              https://api.github.com/repos/${{ github.repository }}/releases/assets/$asset_id
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload the new binary to the release
      - name: Upload New Binary to Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./my-app
          tag_name: ${{ github.ref_name }}
          overwrite: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
